# Generated by Django 4.2.25 on 2025-10-23 14:56

from django.db import migrations
import os


def migrate_old_song_data(apps, schema_editor):
    """
    Migrate data from old fields to new multilingual fields.
    Old fields: title, script_tamil, script_telugu, script_english
    New fields: title_ta, title_te, title_en, lyrics_ta, lyrics_te, lyrics_en
    """
    Song = apps.get_model('songs', 'Song')
    AudioFile = apps.get_model('songs', 'AudioFile')
    
    songs = Song.objects.all()
    
    for song in songs:
        # Migrate title to appropriate language field
        if hasattr(song, 'title') and song.title:
            if song.language == 'tamil':
                song.title_ta = song.title
            elif song.language == 'telugu':
                song.title_te = song.title
            elif song.language == 'english':
                song.title_en = song.title
            else:
                # Default to Tamil if language is unknown
                song.title_ta = song.title
        
        # Migrate lyrics
        if hasattr(song, 'script_tamil') and song.script_tamil:
            song.lyrics_ta = song.script_tamil
        
        if hasattr(song, 'script_telugu') and song.script_telugu:
            song.lyrics_te = song.script_telugu
        
        if hasattr(song, 'script_english') and song.script_english:
            song.lyrics_en = song.script_english
        
        # Migrate audio file to AudioFile model if exists
        if hasattr(song, 'audio') and song.audio:
            try:
                # Check if AudioFile already exists for this audio file
                audio_name = song.audio.name if song.audio.name else ""
                
                if audio_name:
                    # Try to find existing AudioFile
                    existing_audio = AudioFile.objects.filter(
                        audio_file=audio_name
                    ).first()
                    
                    if existing_audio:
                        song.audio_file = existing_audio
                    else:
                        # Create new AudioFile instance
                        audio_obj = AudioFile.objects.create(
                            source_type='file',
                            title=song.title_ta or song.title_te or song.title_en or 'Unknown',
                            audio_file=audio_name
                        )
                        song.audio_file = audio_obj
            except Exception as e:
                # If migration fails for this song, just skip
                print(f"Warning: Could not migrate audio for song {song.id}: {e}")
                pass
        
        song.save()


def reverse_migrate(apps, schema_editor):
    """
    Reverse migration - copy data back to old fields if needed.
    This is optional and may not be needed.
    """
    Song = apps.get_model('songs', 'Song')
    
    songs = Song.objects.all()
    
    for song in songs:
        # Restore title from appropriate language field
        if song.language == 'tamil' and song.title_ta:
            song.title = song.title_ta
        elif song.language == 'telugu' and song.title_te:
            song.title = song.title_te
        elif song.language == 'english' and song.title_en:
            song.title = song.title_en
        else:
            song.title = song.title_ta or song.title_te or song.title_en or ''
        
        # Restore lyrics
        if song.lyrics_ta:
            song.script_tamil = song.lyrics_ta
        if song.lyrics_te:
            song.script_telugu = song.lyrics_te
        if song.lyrics_en:
            song.script_english = song.lyrics_en
        
        song.save()


class Migration(migrations.Migration):

    dependencies = [
        ('songs', '0004_audiofile_alter_song_options_and_more'),
    ]

    operations = [
        migrations.RunPython(migrate_old_song_data, reverse_migrate),
    ]
